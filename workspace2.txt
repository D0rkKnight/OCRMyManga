import argparse
from enum import Enum
import io
import os
from pprint import pprint

from google.cloud import vision
from PIL import Image, ImageDraw


class FeatureType(Enum):
    PAGE = 1
    BLOCK = 2
    PARA = 3
    WORD = 4
    SYMBOL = 5

# Grant credentials to notebook
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'credentials.json'


def draw_boxes(image, bounds, color):
    """Draw a border around the image using the hints in the vector list."""
    draw = ImageDraw.Draw(image)

    for bound in bounds:
        draw.polygon(
            [
                bound.vertices[0].x,
                bound.vertices[0].y,
                bound.vertices[1].x,
                bound.vertices[1].y,
                bound.vertices[2].x,
                bound.vertices[2].y,
                bound.vertices[3].x,
                bound.vertices[3].y,
            ],
            None,
            color,
        )
    return image

def get_document_bounds(image_file, feature):
    document = getAnnotations(image_file)
    
    bounds = []

    # Collect specified feature bounds by enumerating all document features
    # Lmao this is so hacky
    for page in document.pages:
        for block in page.blocks:
            for paragraph in block.paragraphs:
                for word in paragraph.words:
                    for symbol in word.symbols:
                        if feature == FeatureType.SYMBOL:
                            bounds.append(symbol.bounding_box)

                    if feature == FeatureType.WORD:
                        bounds.append(word.bounding_box)

                if feature == FeatureType.PARA:
                    bounds.append(paragraph.bounding_box)

            if feature == FeatureType.BLOCK:
                bounds.append(block.bounding_box)

    # The list `bounds` contains the coordinates of the bounding boxes.
    return bounds

def getAnnotations(image_file):
    """Returns document bounds given an image."""
    client = vision.ImageAnnotatorClient()

    # Convert to io byte format
    buffer = io.BytesIO()
    image_file.save(buffer, format="PNG")

    image = vision.Image(content=buffer.getvalue())

    response = client.document_text_detection(image=image)
    document = response.full_text_annotation
    return document


def render_doc_text(filein, fileout):
    image = Image.open(filein)
    render_doc_text_fromimg(image, fileout)

def render_doc_text_fromimg(img, fileout):
    bounds = get_document_bounds(img, FeatureType.BLOCK)
    draw_boxes(img, bounds, "blue")
    bounds = get_document_bounds(img, FeatureType.PARA)
    draw_boxes(img, bounds, "red")
    bounds = get_document_bounds(img, FeatureType.WORD)
    draw_boxes(img, bounds, "yellow")

    if fileout != 0:
        img.save(fileout)
    else:
        img.show()

def get_doc_metadata(img):
    annotations = getAnnotations(img)
    
    return annotations