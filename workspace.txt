# Execution sandbox
# Create a pdf with the img as background
from PIL import Image, ImageDraw
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from PyPDF2 import PdfMerger

# render_doc_text("resources/ocrtest2.png", "out/doc_ocr_out.png")

import reportlab.rl_config
reportlab.rl_config.warnOnMissingFontGlyphs = 0

from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.cidfonts import UnicodeCIDFont
pdfmetrics.registerFont(UnicodeCIDFont('HeiseiMin-W3'))

def imgToPdf(img, pdf_merger, alpha=0.0):
    
    annotations = get_doc_metadata(img)

    # Create in-memory PDF files
    pdf_buffer = BytesIO()
    can = canvas.Canvas(pdf_buffer)
    can.setFont('HeiseiMin-W3', 16)

    # Also throw the image onto the canvas
    imgReader = ImageReader(img)

# Write img to the canvas (stretch to fill page)
    can.drawImage(imgReader, 0, 0, can._pagesize[0], can._pagesize[1])

    # rot = -90
    # can.translate(can._pagesize[0]/2, can._pagesize[1]/2)
    # can.rotate(rot)

    textObj = can.beginText(0, 0)
    
    for (i, page) in enumerate(annotations.pages):
    # Just gonna assume we're on page 1 here with the request
        for (j, block) in enumerate(page.blocks):
            for (k, paragraph) in enumerate(block.paragraphs):
            # Get paragraph text
                for (l, word) in enumerate(paragraph.words):
                    for (m, symbol) in enumerate(word.symbols):
                        text = symbol.text
                
                        # Draw paragraph text
                        poly = symbol.bounding_box.vertices
                        coords = [(p.x, img.size[1]-p.y) for p in poly]
                        
                        # Becomes first quadrant when we rotate
                        # coords = [(img.size[0]-p.x, img.size[1]-p.y) for p in poly]
                    
                    # Coords are currently image-size, convert to pdf-size
                        pdf_coords = [(p[0] * can._pagesize[0] / img.size[0], p[1] * can._pagesize[1] / img.size[1]) for p in coords]
                    
                    # Center coordinates
                    #     pdf_coords = [(p[0] - can._pagesize[0]/2, p[1] - can._pagesize[1]/2) for p in pdf_coords]
                    
                    # # Convert pdf coords to rotated coordinates
                    #     rot_coords = [(-p[1], p[0]) for p in pdf_coords]
                                            
                        # Move pointer to where the char should be
                        currPos = textObj.getCursor()
                        desiredPos = pdf_coords[0]
                        
                        delta = (desiredPos[0] - currPos[0], desiredPos[1] - currPos[1])
                        
                        textObj.moveCursor(delta[0], delta[1])
                        textObj.textOut(text)
                        
                        print(textObj.getCursor())
                        
                        
                    
    # Set to clear text
    textObj.setFillColor('black', alpha=alpha)
    can.drawText(textObj)


    # can.rotate(-rot)
    
    # Test draw string
    can.drawString(500, 700, "你好")
    can.drawString(130, 100, "你好")

    # Save PDF file
    can.save()
    pdf_buffer.seek(0)

    # Merge PDF files
    pdf_merger.append(pdf_buffer)